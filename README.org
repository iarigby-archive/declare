#+TITLE: README

* declare
პროგრამა უცხოეთში ნაყიდი ამანათების სამართავად და დასადეკლარირებლად.
** features
აქ წერია მთლიანი პროგრამის ხედვა. სექციაში [[გეგმა]] ჩამოვთვლი პირველი ეტაპისთვის რის გაკეთებას შევეცდები
 - გაკეთებულ შეკვეთებზე ინფორმაციის გაერთიანება
   ebay, amazon
 - საქართველოში ჩამომტანი სერვისების ავტომატური მართვა
   - tracking code დამატება და დეკლარირება
   - ჩამოტანის ხარჯის დათვლა ინვოისებიდან
   - რეისების, ამანათების, შეკვეთების ინფორმაციის გაერთიანება.
     რომელი ნივთი რომელ გზავნილშია და როდის ჩამოდის. სამივე ცალ-ცალკე უნდა ნახო ახლა
 - სხვისი ამანათების მართვა
   იმიტომ რომ სახლში მარტივად გაკეთების სწავლაც დაეზარებათ და მაინც მე უნდა ვუკეთო. უნდა იყოს გათვალისწინებული, რომ ამაზონზე ერთი ანგარიშით საფოსტო სერვისის ორ ანგარიშზე შეიძლება ვიწერდე ამანათებს
** კომპონენტები
*** server
**** main app + rest api
- დღეში რამდენჯერმე შეამოწმებს ამანათების სტატუსს/ახალ ამანათს მომხმარებლისთვის
- გამოიძახებს სერვისებს ავტომატურად დასადეკლარირებლად
- მომხმარებელს შეატყობინებს სიახლეებს
- მიაწოდებს მონაცემთა ბაზის ინფორმაციას frontს
**** database
შეინახავს
- ინფორმაციას ამანათებზე
- სხვადასხვა საიტების api tokenებს, ბოლო შემოწმების თარიღს, etc
- ? მისამართებს
**** სერვისი - selenium
api reverse engineeringში ვერ ვერკვევი, ამიტომ ჯავასკრიპტით ან პითონით გამოვიყენებ სელენიუმს (მაგაზე მუშაობა დაწყებული მქონდა არეული სკრიპტით და თავიდან გავაკეთებ)
- ახლა ორიენტირებული ვიქნები usa2georgia და amanati.geზე
*** client
**** pwa Front End
ძალიან მარტივი interface მონაცემთა ბაზისთვის, reactში აწყობილი (ცოტა ხანს სწავლას დავუთმობ დროს). რადგანაც ყველა ენასა თუ ტექნოლოგიაში მცირე გამოცდილება მაქვს, ვფიქრობ კარგი იქნება ახლის ათვისების უნარის ჩვენება.
**** browser extension
- თუ დასაწყისში ebay და amazon apiსთან მარტივად ვერ დავმეგობრდი (ან დრო არ მქონდა), ღილაკი იქნება რომელიც გახსნილი ვებ გვერდიდან ინფორმაციას აიღებს
*** misc
**** სკრიპტი დარეგისტრირებისას მიმდინარე ამანათების მოსაძებნად
by default ახალი ამანათები დაემატება (უფრო მარტივი სამართავია), ანუ იგულისხმება რომ, მაგალითად, როცა სელენიუმით usa2georgiaზე შევალ, იქ არ დამხვდება თრექინგ კოდი უკვე დამატებული და მხოლოდ დასადეკლარირებელი, რადგანაც ამანათს მაშინვე ვამატებ და ფიზიკურად ვერ მოასწრებს საწყობში მისვლას. მაგრამ ერთი კონკრეტული use caseისთვის პატარა ფუნქციის დაწერა შეიძლება,
თან თუ სერვერზე გვიან დაფიქსირებული შეცდომა მოხდა და არ დარეგისტრირდა, გამოსასწორებლადაც გამოდგება
* გეგმა
** მომზადება (10 დღე)
- პროექტის გამართვა.
  ყველა საჭირო ტექნოლოგიის დაინსტალირება, ერთმანეთთან დაკავშირება
- api დოკუმენტაციების გაცნობა
- მოკლე პროტოტიპების გაკეთება და დატესტვა
- react სწავლის დაწყება
- პირველი სპრინტისთვის ფუნქციების არჩევა და პრიმიტიული use caseების შერჩევა და გაკეთება
** TODO first sprint
ვფიქრობ, რომ საჩვენებელი ლექციის პარალელურად, 2-3 კვირა ვიმუშავებ საწყის ვერსიაზე. კონკრეტული გეგმა მექნება მომზადების ბოლოს
